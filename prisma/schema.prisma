// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                         = "zod-prisma-types"
  createOptionalDefaultValuesTypes = true
  createRelationValuesTypes        = true
  output                           = "../app/helpers/zodPrisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum RatingStatus {
  ongoing
  concluded
  cancelled
}

enum ReportStatus {
  pending
  sent
}

model Methodology {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  url         String
  ratingModel Rating[]
  unit        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Questionnaire {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  url         String
  ratingModel Rating[]
  unit        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model LetterOfEngagement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  url         String
  ratingModel Rating[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model Invoice {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  url         String
  ratingModel Rating[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Industry {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  clientModel Client[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Reports {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  rating           String        @db.ObjectId
  ratingModel      Rating        @relation(fields: [rating], references: [id])
  reportTitle      String
  reportFileUrl    String?
  finalLetterUrl   String?
  consentLetterUrl String?
  version          String
  status           ReportStatus? @default(pending)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model Rating {
  id                        String        @id @default(auto()) @map("_id") @db.ObjectId
  ratingTitle               String        @default("Issuer Rating")
  ratingScore               String?
  unit                      String?
  ratingClass               String?       @db.ObjectId
  ratingClassModel          RatingClass?  @relation(fields: [ratingClass], references: [id])
  ratingYear                Int
  supervisor                String
  primaryAnalyst            String?
  secondaryAnalyst          String?
  client                    String        @db.ObjectId
  clientModel               Client        @relation(fields: [client], references: [id])
  methodology               String        @db.ObjectId
  questionnaire             String        @db.ObjectId
  methodologyModel          Methodology   @relation(fields: [methodology], references: [id])
  questionnaireModel        Questionnaire @relation(fields: [questionnaire], references: [id])
  questionnaireFiles        String?
  additionalFiles           String?
  requireAdditionalFiles    Boolean       @default(false)
  requireQuestionnaireFiles Boolean       @default(true)
  loe                      String?     @db.ObjectId
  invoice                   String?     @db.ObjectId
  loeModel                  LetterOfEngagement? @relation(fields: [loe], references: [id])
  invoiceModel              Invoice?      @relation(fields: [invoice], references: [id])
  status                    RatingStatus? @default(ongoing)
  issueDate                 DateTime?
  expiryDate                DateTime?
  reportModel               Reports[]
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt
}

model RatingClass {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  ratingModel Rating[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Client {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  industry            String    @db.ObjectId
  industryModel       Industry  @relation(fields: [industry], references: [id])
  companyName         String
  logo                String?
  companyPhoneNumbers String?
  numberAndStreet     String?
  building            String?
  area                String?
  landmark            String?
  regionOrState       String?
  country             String?   @default("Nigeria")
  website             String?
  role                String?   @default("client")
  contactModel        Contact[]
  ratingModel         Rating[]
  createdBy           String?
  isDeleted           Boolean   @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Contact {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName     String
  email        String   @unique
  password     String?
  position     String?
  phoneNumbers String?
  magicToken   String?
  client       String   @db.ObjectId
  address      String?
  canLogin     Boolean  @default(false)
  clientModel  Client   @relation(fields: [client], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Log {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      String
  action    String
  table     String
  message   String
  prevDocs  String
  newDocs   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}